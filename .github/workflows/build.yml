name: Build

on:
  push:
  schedule:
    - cron: '0 0 * * 0'


env:
#  if: (github.event_name == 'schedule')
#  GITHUB_ENV: https://docs.github.com/en/actions/learn-github-actions/environment-variables#about-environment-variables
  FF_VERSION: 7.1
  LLVM_VER: ${{ vars.LLVM_VER }}
  LLVM_VER_DEFAULT: 20
  NINJA_STATUS: '[%f/%t %e %r]'
  XCODE: 16.4
  LINUX_SYSROOT_ID: avbuild-linux-sysroot-rainyl

jobs:
  Apple:
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: macos-15
    env:
      TARGET_OS: ${{ matrix.target }}
      CONFIG_SUFFIX: -${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        config: [default,lite-lto] # lto reduce about 300KB for lite build
        target: [macOS,iOS,iOSSimulator]
        exclude:
          - config: default
            target: iOS
          - config: default
            target: iOSSimulator
          - config: lite
            target: iOSSimulator
          - config: default
            target: macCatalyst
          - config: lite
            target: macCatalyst
          - config: default
            target: tvOS
          - config: default
            target: tvOSSimulator
          - config: lite
            target: tvOSSimulator
          - config: default
            target: visionOS
          - config: lite # llvm-ar-17 merged visionOS lto libs has wrong contents (/,//,*.o/)
            target: visionOS
          - config: default
            target: visionOSSimulator
          - config: lite
            target: visionOSSimulator
    steps:
    - uses: actions/checkout@v4
    - name: Setup Xcode
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE }}.app
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      run: ./tools/ci-before-build.sh
    - name: Configure and Build
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      run: |
        export FFSRC=$PWD/ffmpeg-${FF_VERSION}
        [[ "${TARGET_OS}" == "iOS" || "${TARGET_OS}" == "tvOS"* || "${TARGET_OS}" == "xr"* || "${TARGET_OS}" == "vision"* ]]  && export USER_OPT="--enable-wolfssl"
        [[ "${TARGET_OS}" == "macOS" ]] && export USER_OPT="--enable-libshaderc"
        ./avbuild.sh ${TARGET_OS}
    - name: Make SDK
      shell: bash
      run: ./tools/ci-after-build.sh
    - name: Archieve SDK
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: ffmpeg-*.tar.xz
    - name: Release SDK
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        draft: true
        prerelease: false
        files: |
          ffmpeg-*.tar.xz
  Android:
    runs-on: macos-15
    env:
      TARGET_OS: android
      CONFIG_SUFFIX: -${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        config: [lite,lite-lto]
    steps:
    - uses: actions/checkout@v4
    - name: 'Restore sysroot cache'
      id: sysroot-cache
      uses: actions/cache@v4
      with:
        path: /tmp/sysroot
        key: sysroot-${{ env.TARGET_OS }}-${{ env.LINUX_SYSROOT_ID }}
    - name: Create Build Environment
      shell: bash
      env:
        SYSROOT_CACHE_HIT: ${{ steps.sysroot-cache.outputs.cache-hit }}
      run: ./tools/ci-before-build.sh
    - name: Configure and Build 32bit
      shell: bash
      run: |
        export ANDROID_NDK=$ANDROID_NDK_LATEST_HOME
        export FFSRC=$PWD/ffmpeg-${FF_VERSION}
        export USER_OPT="--enable-wolfssl"
        ./avbuild.sh ${TARGET_OS} "armv7 x86"
        mv sdk-android-clang{,32}
    - name: Configure and Build 64bit
      shell: bash
      run: |
        export ANDROID_NDK=$ANDROID_NDK_LATEST_HOME
        export FFSRC=$PWD/ffmpeg-${FF_VERSION}
        export USER_OPT="--enable-wolfssl"
        ./avbuild.sh ${TARGET_OS} "arm64 x86_64"
        rsync -auv --ignore-existing  sdk-android-clang{32/*,}
        rm -rf sdk-android-clang32
    - name: Make SDK
      shell: bash
      run: ./tools/ci-after-build.sh
    - name: Archieve SDK
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-${{ env.FF_VERSION }}-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: ffmpeg-*.tar.xz
    - name: Release SDK
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        draft: true
        prerelease: false
        files: |
          ffmpeg-*.tar.xz